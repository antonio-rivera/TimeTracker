@using TimeTracker.Models
@page "/"


<div class="mt-4 container-fluid">
    <div class="row">

        <div class="col-md text-center">
            <h2>Work Items</h2>
            <Items WorkItems="WorkItems" OnDeleteItem="@DeleteItem" OnUpdateProjectTime="@UpdateProjectTime" OnUpdateProjectName="UpdateProjectName" />
            <button @onclick="AddItem" class="btn btn-success mx-auto w-25 mb-3">Add</button>
            <hr class="mb-1" />
            <Total TotalValue="@TotalTimeItems" />
        </div>

        <div id="timecard" class="col-md text-center">
            <h2>Timecard</h2>
            <TimeCard Projects="Projects" WorkItems="@WorkItems" OnDeleteProject="@DeleteProject" GetTime="@UpdateProjectTime" />
            <button @onclick="AddProject" class="btn btn-success mx-auto w-25 mb-3">Add</button>
            <hr class="mb-1" />
            <Total TotalValue="@TotalTimeProjects" />
        </div>
    </div>
</div>

@code {

    public List<WorkItem> WorkItems = new List<WorkItem>();
    public List<Project> Projects = new List<Project>();
    public decimal TotalTimeItems = 0;
    public decimal TotalTimeProjects = 0;

    public void SumTotals(IList<WorkItem> items, IList<Project> projects)
    {
        TotalTimeProjects = projects.Sum(project => project.Time);
        TotalTimeItems = items.Sum(item => item.Project.Time);

        if (items.Count == 0)
        {
            TotalTimeItems = 0;
        }

        if (projects.Count == 0)
        {
            TotalTimeProjects = 0;
        }

    }

    public void AddItem()
    {
        WorkItem item = new WorkItem("", new Project(0m, ""));
        WorkItems.Add(item);
    }

    public void AddProject()
    {
        Project project = new Project(0m, "");
        Projects.Add(project);
    }


    public async Task<bool> DeleteItem(Guid id)
    {
        int delIndex = WorkItems.FindIndex(item => item.Id == id);
        if (delIndex >= 0)
        {
            WorkItems.RemoveAt(delIndex);
            SumTotals(WorkItems, Projects);
            return true;
        }

        return false;

    }

    public async Task<bool> DeleteProject(Guid id)
    {
        int delIndex = Projects.FindIndex(item => item.Id == id);
        if (delIndex >= 0)
        {
            Projects.RemoveAt(delIndex);
            SumTotals(WorkItems, Projects);
            return true;
        }

        return false;

    }

    public async Task UpdateProjectTime(Project updatedProject)
    {
        var (time, projectName) = updatedProject;


        if (!string.IsNullOrEmpty(projectName))
        {
            int ProjectToUpdateIdx = Projects.FindIndex(project => project.Name == projectName);
            if (ProjectToUpdateIdx != -1)
            {
                var itemsUnderThisProject = WorkItems.Where(item => item.Project.Name == projectName);
                decimal totalTime = itemsUnderThisProject.Sum(item => item.Project.Time);
                Projects[ProjectToUpdateIdx].Time = totalTime;

            }

        }

        SumTotals(WorkItems, Projects);

    }

    public async Task UpdateProjectName()
    {
        //This method just signals the parent to refresh
        //When parent refreshes, TimeCard component refreshes and dropdown items become visible.

    }


}