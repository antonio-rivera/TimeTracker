@using TimeTracker.Models
@using System.Diagnostics.CodeAnalysis

<div class="table-responsive">

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Project</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            @if (WorkItems is not null)
            {
                @foreach (var item in WorkItems)
                {
                    <tr class="align-middle">
                        <td><textarea class="form-control text-center" @bind="@item.Name" /></td>
                        <td><textarea @bind="@item.Project.Name" @oninput="(e) => UpdateName(e, item)" class="form-control text-center" /></td>
                        <td><input @bind="@item.Project.Time" @oninput="(e) => UpdateTime(e, item)" class="form-control text-center" type="number" min="0" /></td>
                        <td><button @onclick="@(async () => await OnDeleteItem.InvokeAsync(item.Id))" class="btn btn-danger">Delete</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>



@code {


    [Parameter, AllowNull]
    public List<WorkItem> WorkItems { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteItem { get; set; }

    [Parameter]
    public EventCallback<Project> OnUpdateProjectTime { get; set; }
    [Parameter]
    public EventCallback OnUpdateProjectName { get; set; }

    void UpdateName(ChangeEventArgs e, WorkItem item)
    {
        if (!string.IsNullOrEmpty((string?)e.Value))
        {
            item.Project.Name = (string)e.Value;
            OnUpdateProjectName.InvokeAsync();

        }

    }

    void UpdateTime(ChangeEventArgs e, WorkItem item)
    {
        if (!string.IsNullOrEmpty((string?)e.Value))
        {
            item.Project.Time = Decimal.Parse((string)e.Value);
            OnUpdateProjectTime.InvokeAsync(item.Project);

        }
    }

}

